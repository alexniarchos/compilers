/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
/**
 *  Package and Import Specifications
 */
import java_cup.runtime.*;

/**
 *  Usercode Components
 */
parser code {:
    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }
:}

/* define how to connect to the scanner! */
scan with {: return s.next_token(); :};

/**
 *  Symbol Lists
 */

/* Terminals (tokens returned by the scanner). */
terminal            SEMI, PLUS, MINUS, TIMES, UMINUS, LPAREN, RPAREN, LBRACKET, RBRACKET, IF, ELSE, COMMA, NAME, PREFIX, SUFFIX;
terminal Integer    NUMBER;        // our scanner provides numbers as integers
terminal String     STRING_LITERAL;        // our scanner provides numbers as strings

/*  Non terminals */
non terminal        program, defs, def, args, calls, expr, cond, call, args2;

/**
 *  Precedence Declarations
 */
precedence left PLUS, MINUS;
precedence left TIMES;
precedence left UMINUS;

/**
 *  The Grammar Rules
 */

program     ::= defs calls  {: :}
            ;

defs        ::= def defs    {: :}
            | def           {:  :}
            ;

def         ::= NAME:n LPAREN args:a RPAREN LBRACKET expr:e RBRACKET {: System.out.println("public static String "+n+"("+a+")"+"{\n"+e+"\n}\n"); :}
            ;

args        ::= NAME:name COMMA args:a {: RESULT = "String " + name.toString() + "," + a; :}
            | NAME:name  {: RESULT = "String " + name.toString(); :}
            |
            ;

expr        ::= IF LPAREN cond:c RPAREN expr:e1 ELSE expr:e2
            | call:c
            | STRING_LITERAL:s {: RESULT = "return \"" + s + "\""; :}
            | expr PLUS expr
            | NAME
            ;

cond        ::= IF LPAREN cond:c RPAREN expr:e1 ELSE expr:e2
            | expr PREFIX expr
            | expr SUFFIX expr
            ;

calls       ::= call calls
            | call
            ;

call        ::= NAME:n LPAREN args2 RPAREN
            ;

args2       ::= expr COMMA args2
            | expr
            |
            ;